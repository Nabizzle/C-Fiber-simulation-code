/*--------------------------------------------------------------------
originally written 11/11/17
last update 12/1/17
Nabeel Chowdhury

SIMULATION OF PNS UNMYELINATED C-FIBER WITH A CLUSTERED DISTRIBUTION OF NA CHANNELS FOR IN THE NEISHABOURI PAPER

The writing of this code was inspired by the model created by McIntyre CC, Richardson AG, and Grill WM.
in Modeling the excitability of mammalian nerve fibers: influence of afterpotentials on the recovery
cycle. Journal of Neurophysiology 87:995-1006, 2002.
----------------------------------------------------------------------*/

load_proc("nrnmainmenu")

proc model_globels() {		
	v_init=-61.38 //rest potential(mV) 		
	dt=0.025 //time stiep (ms)       	
	tstop=11 //simulation duration
	D=.25 //diameter of the axon
	AxialR=8 //axial resistance ohm*cm
	memCm=.81 //membrane capacitance uF/cm^2
	
	nodeDivisions=1 //number of compartments in the nodes
	internodeDivisions=1 //number of compartments in the internodes
	raftLength=.2 //length of lipid raft (um)
	internodeLength=2 //internodal length (um)
	totalLength=2000 //total length of the C-Fiber (um)
	
//finds if the last section ends in the middle of a node, at the end of a node, or in between nodes.
	nodes=int(totalLength/(raftLength+internodeLength)) //initial number of nodes
	internodes=nodes //initial number of nodes
	//find where the last section cuts off
	remainder = totalLength - (raftLength+internodeLength)*nodes
	if (remainder<=raftLength && remainder>0){ //finds if the cut off is within or just after the node
		nodes=nodes+1//adds one more node
		endLength = remainder //saves the length of the last section
		print "last section ends in a node"
		}else if (remainder>raftLength){//finds if the cit off is between nodes
		nodes=nodes+1 //adds another node
		internodes=internodes+1 //adds another internode
		endLength = remainder-raftLength //saves the length of the end section
		print "last section is between nodes"
		}else{
		endLength = remainder //just remembers that there is no extra section
		print "division fit perfectly"
	}
	
//Intracellular stimuluation parameters//	
	istim=10 //amplitude of injected current (nA)
	delay=1	//dealy of onset of current (ms)
	pw=.1 //pulse width of the injected current (ms)
	cathodeDuration=7 //pulse width of the charge balancing current (ms)
	}			

model_globels ()

objectvar stim //object variable to create the injected anodic current
objectvar stim2 //object variable to create the injected cathodic charge balancing current

create axonNode[nodes],axonInternode[internodes] //creates the sections of the C-Fiber
access axonNode[int(nodes/2)] //makes the section of the C-Fiber with stim the default

proc initialize(){
	if (nodes>internodes){
		for i=0,nodes-2 {
			axonNode[i]{
				nseg=nodeDivisions //number of compartments in the node
				diam=D //diameter of the axon (um)
				L=raftLength //length of the node (um)
				Ra=AxialR //axoplasmic resistance of the C-Fiber (ohm*cm)
				cm=memCm //capacitance of the C-Fiber (uF/cm^2)
				insert saxnode //creates a C-Fiber full of the channels defined in the Neishabouri and Tigerholm papers
				}
			}
		axonNode[nodes-1]{
			nseg=nodeDivisions //number of compartments in the node
			diam=D //diameter of the axon (um)
			L=endLength //length of the node (um)
			Ra=AxialR //axoplasmic resistance of the C-Fiber (ohm*cm)
			cm=memCm //capacitance of the C-Fiber (uF/cm^2)
			insert saxnode //creates a C-Fiber full of the channels defined in the Neishabouri and Tigerholm papers
			}
		for i=0,internodes-1 {
			axonInternode[i]{
				nseg=internodeDivisions //number of compartments in the node
				diam=D //diameter of the axon (um)
				L=internodeLength //length of the node (um)
				Ra=AxialR //axoplasmic resistance of the C-Fiber (ohm*cm)
				cm=memCm //capacitance of the C-Fiber (uF/cm^2)
				insert axblank //creates a C-Fiber with potassium channels in the Neishabouri paper
				}
			}
		for i=0, internodes-1 {
			connect axonNode[i](0), axonInternode[i](1)
			connect axonInternode[i](0), axonNode[i+1](1)
			}
		}else if (endLength>0){
		for i=0,nodes-1 {
			axonNode[i]{
				nseg=nodeDivisions //number of compartments in the node
				diam=D //diameter of the axon (um)
				L=raftLength //length of the node (um)
				Ra=AxialR //axoplasmic resistance of the C-Fiber (ohm*cm)
				cm=memCm //capacitance of the C-Fiber (uF/cm^2)
				insert saxnode //creates a C-Fiber full of the channels defined in the Neishabouri and Tigerholm papers
				}
			}
		for i=0,internodes-2 {
			axonInternode[i]{
				nseg=internodeDivisions //number of compartments in the node
				diam=D //diameter of the axon (um)
				L=internodeLength //length of the node (um)
				Ra=AxialR //axoplasmic resistance of the C-Fiber (ohm*cm)
				cm=memCm //capacitance of the C-Fiber (uF/cm^2)
				insert axblank //creates a C-Fiber with potassium channels in the Neishabouri paper
				}
			}
		axonInternode[internodes-1]{
			nseg=internodeDivisions //number of compartments in the node
			diam=D //diameter of the axon (um)
			L=endLength //length of the node (um)
			Ra=AxialR //axoplasmic resistance of the C-Fiber (ohm*cm)
			cm=memCm //capacitance of the C-Fiber (uF/cm^2)
			insert axblank //creates a C-Fiber with potassium channels in the Neishabouri paper
			}
		for i=0, nodes-1 {
			connect axonNode[i](0), axonInternode[i](1)
			if (i<nodes-1){
				connect axonInternode[i](0), axonNode[i+1](1)
			}
			}
		}else{
			for i=0,nodes-1 {
			axonNode[i]{
				nseg=nodeDivisions //number of compartments in the node
				diam=D //diameter of the axon (um)
				L=raftLength //length of the node (um)
				Ra=AxialR //axoplasmic resistance of the C-Fiber (ohm*cm)
				cm=memCm //capacitance of the C-Fiber (uF/cm^2)
				insert saxnode //creates a C-Fiber full of the channels defined in the Neishabouri and Tigerholm papers
				}
			}
		for i=0,internodes-1 {
			axonInternode[i]{
				nseg=internodeDivisions //number of compartments in the node
				diam=D //diameter of the axon (um)
				L=internodeLength //length of the node (um)
				Ra=AxialR //axoplasmic resistance of the C-Fiber (ohm*cm)
				cm=memCm //capacitance of the C-Fiber (uF/cm^2)
				insert axblank //creates a C-Fiber with potassium channels in the Neishabouri paper
				}
			}
		for i=0, nodes-1 {
			connect axonNode[i](0), axonInternode[i](1)
			if (i<nodes-1){
				connect axonInternode[i](0), axonNode[i+1](1)
			}
			}
	}
	finitialize(v_init)
	fcurrent()
	}
initialize()

//intracellular stimulus//
proc stimul() {
print(int(nodes/2))
axonNode[int(nodes/2)]{
	stim=new IClamp()
	stim.loc(.5)
	stim.del=delay
	stim.dur=pw
	stim.amp=istim
	}
	
axonNode[int(nodes/2)]{
	stim2=new IClamp()
	stim2.loc(.5)
	stim2.del=delay+pw //sets the charge balancing current to occur after the initial current is done
	stim2.dur=cathodeDuration
	stim2.amp=-istim*pw/cathodeDuration //equation to balance the charge
	}
	}
stimul()

xpanel("Stimulus parameters")
	xvalue("Stimulus Amplitude (nA)", "istim", 1, "stimul()", 1)
	xvalue("Pulse Duration (ms)", "pw", 1, "stimul()", 1)
	xvalue("Onset Delay (ms)", "delay", 1, "stimul()", 1)
xpanel(100,182)

xpanel("RunControl", 0)
	v_init = v_init
	xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
	xbutton("Init & Run","run()")
	xbutton("Stop","stoprun=1")
	runStopAt = 5
	xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
	runStopIn = 1
	xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
	xbutton("Single Step","steprun()")
	t = 0
	xvalue("t","t", 2 )
	tstop = tstop
	xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
	dt = 0.025
	xvalue("dt","dt", 1,"setdt()", 0, 1 )
	steps_per_ms = 40
	xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
	xcheckbox("Quiet",&stdrun_quiet,"")
	realtime = 0
	xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(133,387)